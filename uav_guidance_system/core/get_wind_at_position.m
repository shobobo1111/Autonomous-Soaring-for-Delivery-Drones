function wind = get_wind_at_position(x, y, z, wind_field)
    % Interpolates wind components at any x,y,z position using coordinate vectors
    
    % Check if point is inside wind field bounds
    if x < min(wind_field.x(:)) || x > max(wind_field.x(:)) || ...
       y < min(wind_field.y(:)) || y > max(wind_field.y(:)) || ...
       z < min(wind_field.z(:)) || z > max(wind_field.z(:))
        warning('Position outside wind field bounds. Using nearest edge values.');
    end
    
    % Use the 1D grid coordinate vectors instead of the 3D meshgrid arrays
    % The error was caused by using X,Y,Z (3D arrays) when interp3 expects vectors
    wind.Wx = interp3(wind_field.x, wind_field.y, wind_field.z, ...
                      wind_field.Wx, x, y, z, 'linear');
    wind.Wy = interp3(wind_field.x, wind_field.y, wind_field.z, ...
                      wind_field.Wy, x, y, z, 'linear');
    wind.U  = interp3(wind_field.x, wind_field.y, wind_field.z, ...
                      wind_field.U, x, y, z, 'linear');

    % % Use the vector form of interp3 which doesn't care about grid format
    % wind.Wx = interp3(wind_field.x, wind_field.y, wind_field.z, ...
    %                   permute(wind_field.Wx, [2,1,3]), ...
    %                   x, y, z, 'linear');
    % wind.Wy = interp3(wind_field.x, wind_field.y, wind_field.z, ...
    %                   permute(wind_field.Wy, [2,1,3]), ...
    %                   x, y, z, 'linear');
    % wind.U  = interp3(wind_field.x, wind_field.y, wind_field.z, ...
    %                   permute(wind_field.U, [2,1,3]), ...
    %                   x, y, z, 'linear');
    % 
    % % Handle any NaN values from interpolation
    % if isnan(wind.Wx), wind.Wx = 0; end
    % if isnan(wind.Wy), wind.Wy = 0; end
    % if isnan(wind.U), wind.U = 0; end
end